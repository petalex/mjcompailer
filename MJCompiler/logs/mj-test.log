INFO  03:26:05,265 - ======= MJ SEMANTIC ANALYSER TEST =======
INFO  03:26:05,267 - Compiling source file: C:\Users\dp150101d\Documents\Fakultet\VII semestar\PP1\Projekat\pp1\workspace\MJCompiler\test\semantics\const.mj
INFO  03:26:05,274 - Parsing started
INFO  03:26:05,367 - [Lexer] Token #2: program
INFO  03:26:05,368 - [Lexer] Token #22: Semantics
INFO  03:26:05,368 - [Lexer] Token #8: const
INFO  03:26:05,369 - [Lexer] Token #22: int
INFO  03:26:05,369 - [Lexer] Token #22: a
INFO  03:26:05,369 - [Lexer] Token #39: =
INFO  03:26:05,369 - [Lexer] Token #25: 1
INFO  03:26:05,369 - [Lexer] Token #43: ,
INFO  03:26:05,370 - [Lexer] Token #22: b
INFO  03:26:05,370 - [Lexer] Token #39: =
INFO  03:26:05,370 - [Lexer] Token #25: 2
INFO  03:26:05,370 - [Lexer] Token #42: ;
INFO  03:26:05,371 - [Lexer] Token #8: const
INFO  03:26:05,371 - [Lexer] Token #22: intt
INFO  03:26:05,371 - [Lexer] Token #22: c
INFO  03:26:05,371 - [Lexer] Token #39: =
INFO  03:26:05,371 - [Lexer] Token #25: 3
INFO  03:26:05,371 - [Lexer] Token #42: ;
INFO  03:26:05,371 - [Lexer] Token #8: const
INFO  03:26:05,371 - [Lexer] Token #22: a
INFO  03:26:05,371 - [Lexer] Token #22: e
INFO  03:26:05,372 - [Lexer] Token #39: =
INFO  03:26:05,372 - [Lexer] Token #25: 4
INFO  03:26:05,372 - [Lexer] Token #42: ;
INFO  03:26:05,372 - [Lexer] Token #8: const
INFO  03:26:05,372 - [Lexer] Token #22: char
INFO  03:26:05,372 - [Lexer] Token #22: f
INFO  03:26:05,372 - [Lexer] Token #39: =
INFO  03:26:05,372 - [Lexer] Token #25: 3
INFO  03:26:05,372 - [Lexer] Token #42: ;
INFO  03:26:05,372 - [Lexer] Token #8: const
INFO  03:26:05,373 - [Lexer] Token #22: char
INFO  03:26:05,373 - [Lexer] Token #22: aa
INFO  03:26:05,373 - [Lexer] Token #39: =
INFO  03:26:05,373 - [Lexer] Token #23: a
INFO  03:26:05,373 - [Lexer] Token #43: ,
INFO  03:26:05,373 - [Lexer] Token #22: bb
INFO  03:26:05,373 - [Lexer] Token #39: =
INFO  03:26:05,373 - [Lexer] Token #23: b
INFO  03:26:05,374 - [Lexer] Token #42: ;
INFO  03:26:05,374 - [Lexer] Token #8: const
INFO  03:26:05,374 - [Lexer] Token #22: charr
INFO  03:26:05,374 - [Lexer] Token #22: cc
INFO  03:26:05,374 - [Lexer] Token #39: =
INFO  03:26:05,374 - [Lexer] Token #23: c
INFO  03:26:05,374 - [Lexer] Token #42: ;
INFO  03:26:05,374 - [Lexer] Token #8: const
INFO  03:26:05,374 - [Lexer] Token #22: a
INFO  03:26:05,374 - [Lexer] Token #22: ee
INFO  03:26:05,375 - [Lexer] Token #39: =
INFO  03:26:05,375 - [Lexer] Token #23: e
INFO  03:26:05,375 - [Lexer] Token #42: ;
INFO  03:26:05,375 - [Lexer] Token #8: const
INFO  03:26:05,375 - [Lexer] Token #22: int
INFO  03:26:05,375 - [Lexer] Token #22: ff
INFO  03:26:05,375 - [Lexer] Token #39: =
INFO  03:26:05,375 - [Lexer] Token #23: f
INFO  03:26:05,376 - [Lexer] Token #42: ;
INFO  03:26:05,376 - [Lexer] Token #8: const
INFO  03:26:05,376 - [Lexer] Token #22: char
INFO  03:26:05,376 - [Lexer] Token #22: aa
INFO  03:26:05,376 - [Lexer] Token #39: =
INFO  03:26:05,376 - [Lexer] Token #23: a
INFO  03:26:05,376 - [Lexer] Token #43: ,
INFO  03:26:05,376 - [Lexer] Token #22: bb
INFO  03:26:05,377 - [Lexer] Token #39: =
INFO  03:26:05,377 - [Lexer] Token #23: b
INFO  03:26:05,377 - [Lexer] Token #42: ;
INFO  03:26:05,377 - [Lexer] Token #8: const
INFO  03:26:05,377 - [Lexer] Token #22: charr
INFO  03:26:05,377 - [Lexer] Token #22: cc
INFO  03:26:05,377 - [Lexer] Token #39: =
INFO  03:26:05,377 - [Lexer] Token #23: c
INFO  03:26:05,377 - [Lexer] Token #42: ;
INFO  03:26:05,377 - [Lexer] Token #8: const
INFO  03:26:05,377 - [Lexer] Token #22: a
INFO  03:26:05,377 - [Lexer] Token #22: ee
INFO  03:26:05,378 - [Lexer] Token #39: =
INFO  03:26:05,378 - [Lexer] Token #23: e
INFO  03:26:05,378 - [Lexer] Token #42: ;
INFO  03:26:05,378 - [Lexer] Token #8: const
INFO  03:26:05,378 - [Lexer] Token #22: int
INFO  03:26:05,378 - [Lexer] Token #22: ff
INFO  03:26:05,378 - [Lexer] Token #39: =
INFO  03:26:05,378 - [Lexer] Token #23: f
INFO  03:26:05,378 - [Lexer] Token #42: ;
INFO  03:26:05,378 - [Lexer] Token #6: enum
INFO  03:26:05,378 - [Lexer] Token #22: E
INFO  03:26:05,379 - [Lexer] Token #49: {
INFO  03:26:05,385 - [Lexer] Token #22: A
INFO  03:26:05,385 - [Lexer] Token #43: ,
INFO  03:26:05,386 - [Lexer] Token #22: B
INFO  03:26:05,386 - [Lexer] Token #39: =
INFO  03:26:05,386 - [Lexer] Token #25: 5
INFO  03:26:05,386 - [Lexer] Token #43: ,
INFO  03:26:05,386 - [Lexer] Token #22: C
INFO  03:26:05,386 - [Lexer] Token #43: ,
INFO  03:26:05,386 - [Lexer] Token #22: D
INFO  03:26:05,387 - [Lexer] Token #39: =
INFO  03:26:05,387 - [Lexer] Token #25: 1
INFO  03:26:05,387 - [Lexer] Token #50: }
INFO  03:26:05,387 - [Lexer] Token #6: enum
INFO  03:26:05,387 - [Lexer] Token #22: E
INFO  03:26:05,387 - [Lexer] Token #49: {
INFO  03:26:05,387 - [Lexer] Token #22: A
INFO  03:26:05,387 - [Lexer] Token #50: }
INFO  03:26:05,387 - [Lexer] Token #6: enum
INFO  03:26:05,388 - [Lexer] Token #22: E1
INFO  03:26:05,388 - [Lexer] Token #49: {
INFO  03:26:05,388 - [Lexer] Token #22: A
INFO  03:26:05,388 - [Lexer] Token #43: ,
INFO  03:26:05,388 - [Lexer] Token #22: B
INFO  03:26:05,388 - [Lexer] Token #43: ,
INFO  03:26:05,388 - [Lexer] Token #22: A
INFO  03:26:05,388 - [Lexer] Token #50: }
INFO  03:26:05,388 - [Lexer] Token #49: {
INFO  03:26:05,388 - [Lexer] Token #50: }
INFO  03:26:05,391 - Program(
  ProgramName(
   Semantics
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              Declarations(
                Declarations(
                  Declarations(
                    Declarations(
                      Declarations(
                        Declarations(
                          Declarations(
                            Declarations(
                              Declarations(
                                NoDeclarations(
                                ) [NoDeclarations]
                                ConstDeclaration(
                                  ConstDeclDefinition(
                                    TypeName(
                                     int
                                    ) [TypeName]
                                    ConstIdentifiers(
                                      FirstConstIdentifier(
                                        NumConstIdentifier(
                                         a
                                         1
                                        ) [NumConstIdentifier]
                                      ) [FirstConstIdentifier]
                                      NumConstIdentifier(
                                       b
                                       2
                                      ) [NumConstIdentifier]
                                    ) [ConstIdentifiers]
                                  ) [ConstDeclDefinition]
                                ) [ConstDeclaration]
                              ) [Declarations]
                              ConstDeclaration(
                                ConstDeclDefinition(
                                  TypeName(
                                   intt
                                  ) [TypeName]
                                  FirstConstIdentifier(
                                    NumConstIdentifier(
                                     c
                                     3
                                    ) [NumConstIdentifier]
                                  ) [FirstConstIdentifier]
                                ) [ConstDeclDefinition]
                              ) [ConstDeclaration]
                            ) [Declarations]
                            ConstDeclaration(
                              ConstDeclDefinition(
                                TypeName(
                                 a
                                ) [TypeName]
                                FirstConstIdentifier(
                                  NumConstIdentifier(
                                   e
                                   4
                                  ) [NumConstIdentifier]
                                ) [FirstConstIdentifier]
                              ) [ConstDeclDefinition]
                            ) [ConstDeclaration]
                          ) [Declarations]
                          ConstDeclaration(
                            ConstDeclDefinition(
                              TypeName(
                               char
                              ) [TypeName]
                              FirstConstIdentifier(
                                NumConstIdentifier(
                                 f
                                 3
                                ) [NumConstIdentifier]
                              ) [FirstConstIdentifier]
                            ) [ConstDeclDefinition]
                          ) [ConstDeclaration]
                        ) [Declarations]
                        ConstDeclaration(
                          ConstDeclDefinition(
                            TypeName(
                             char
                            ) [TypeName]
                            ConstIdentifiers(
                              FirstConstIdentifier(
                                CharConstIdentifier(
                                 aa
                                 a
                                ) [CharConstIdentifier]
                              ) [FirstConstIdentifier]
                              CharConstIdentifier(
                               bb
                               b
                              ) [CharConstIdentifier]
                            ) [ConstIdentifiers]
                          ) [ConstDeclDefinition]
                        ) [ConstDeclaration]
                      ) [Declarations]
                      ConstDeclaration(
                        ConstDeclDefinition(
                          TypeName(
                           charr
                          ) [TypeName]
                          FirstConstIdentifier(
                            CharConstIdentifier(
                             cc
                             c
                            ) [CharConstIdentifier]
                          ) [FirstConstIdentifier]
                        ) [ConstDeclDefinition]
                      ) [ConstDeclaration]
                    ) [Declarations]
                    ConstDeclaration(
                      ConstDeclDefinition(
                        TypeName(
                         a
                        ) [TypeName]
                        FirstConstIdentifier(
                          CharConstIdentifier(
                           ee
                           e
                          ) [CharConstIdentifier]
                        ) [FirstConstIdentifier]
                      ) [ConstDeclDefinition]
                    ) [ConstDeclaration]
                  ) [Declarations]
                  ConstDeclaration(
                    ConstDeclDefinition(
                      TypeName(
                       int
                      ) [TypeName]
                      FirstConstIdentifier(
                        CharConstIdentifier(
                         ff
                         f
                        ) [CharConstIdentifier]
                      ) [FirstConstIdentifier]
                    ) [ConstDeclDefinition]
                  ) [ConstDeclaration]
                ) [Declarations]
                ConstDeclaration(
                  ConstDeclDefinition(
                    TypeName(
                     char
                    ) [TypeName]
                    ConstIdentifiers(
                      FirstConstIdentifier(
                        CharConstIdentifier(
                         aa
                         a
                        ) [CharConstIdentifier]
                      ) [FirstConstIdentifier]
                      CharConstIdentifier(
                       bb
                       b
                      ) [CharConstIdentifier]
                    ) [ConstIdentifiers]
                  ) [ConstDeclDefinition]
                ) [ConstDeclaration]
              ) [Declarations]
              ConstDeclaration(
                ConstDeclDefinition(
                  TypeName(
                   charr
                  ) [TypeName]
                  FirstConstIdentifier(
                    CharConstIdentifier(
                     cc
                     c
                    ) [CharConstIdentifier]
                  ) [FirstConstIdentifier]
                ) [ConstDeclDefinition]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclDefinition(
                TypeName(
                 a
                ) [TypeName]
                FirstConstIdentifier(
                  CharConstIdentifier(
                   ee
                   e
                  ) [CharConstIdentifier]
                ) [FirstConstIdentifier]
              ) [ConstDeclDefinition]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclDefinition(
              TypeName(
               int
              ) [TypeName]
              FirstConstIdentifier(
                CharConstIdentifier(
                 ff
                 f
                ) [CharConstIdentifier]
              ) [FirstConstIdentifier]
            ) [ConstDeclDefinition]
          ) [ConstDeclaration]
        ) [Declarations]
        EnumDeclaration(
          EnumDeclDefinition(
            EnumerationName(
             E
            ) [EnumerationName]
            EnumIdentifiers(
              EnumIdentifiers(
                EnumIdentifiers(
                  FirstEnumIdentifier(
                    EnumIdentifier(
                     A
                    ) [EnumIdentifier]
                  ) [FirstEnumIdentifier]
                  NumEnumIdentifier(
                   B
                   5
                  ) [NumEnumIdentifier]
                ) [EnumIdentifiers]
                EnumIdentifier(
                 C
                ) [EnumIdentifier]
              ) [EnumIdentifiers]
              NumEnumIdentifier(
               D
               1
              ) [NumEnumIdentifier]
            ) [EnumIdentifiers]
          ) [EnumDeclDefinition]
        ) [EnumDeclaration]
      ) [Declarations]
      EnumDeclaration(
        EnumDeclDefinition(
          EnumerationName(
           E
          ) [EnumerationName]
          FirstEnumIdentifier(
            EnumIdentifier(
             A
            ) [EnumIdentifier]
          ) [FirstEnumIdentifier]
        ) [EnumDeclDefinition]
      ) [EnumDeclaration]
    ) [Declarations]
    EnumDeclaration(
      EnumDeclDefinition(
        EnumerationName(
         E1
        ) [EnumerationName]
        EnumIdentifiers(
          EnumIdentifiers(
            FirstEnumIdentifier(
              EnumIdentifier(
               A
              ) [EnumIdentifier]
            ) [FirstEnumIdentifier]
            EnumIdentifier(
             B
            ) [EnumIdentifier]
          ) [EnumIdentifiers]
          EnumIdentifier(
           A
          ) [EnumIdentifier]
        ) [EnumIdentifiers]
      ) [EnumDeclDefinition]
    ) [EnumDeclaration]
  ) [Declarations]
  NoMethodDeclarations(
  ) [NoMethodDeclarations]
) [Program]
INFO  03:26:05,391 - Parsing successful
INFO  03:26:05,391 - Semantic analysis started
ERROR 03:26:05,399 - [Semantic Analyser] Symbol "intt" is not defined (line: 5)
ERROR 03:26:05,399 - [Semantic Analyser] Constant type is not int, but initialized with int value (line: 5)
ERROR 03:26:05,399 - [Semantic Analyser] Symbol "a" is not a type (line: 7)
ERROR 03:26:05,399 - [Semantic Analyser] Constant type is not int, but initialized with int value (line: 7)
ERROR 03:26:05,399 - [Semantic Analyser] Constant type is not int, but initialized with int value (line: 9)
ERROR 03:26:05,400 - [Semantic Analyser] Symbol "charr" is not defined (line: 14)
ERROR 03:26:05,400 - [Semantic Analyser] Constant type is not char, but initialized with char value (line: 14)
ERROR 03:26:05,400 - [Semantic Analyser] Symbol "a" is not a type (line: 16)
ERROR 03:26:05,400 - [Semantic Analyser] Constant type is not char, but initialized with char value (line: 16)
ERROR 03:26:05,400 - [Semantic Analyser] Constant type is not char, but initialized with char value (line: 18)
ERROR 03:26:05,400 - [Semantic Analyser] Symbol "aa" is already defined (line: 21)
ERROR 03:26:05,400 - [Semantic Analyser] Symbol "bb" is already defined (line: 21)
ERROR 03:26:05,400 - [Semantic Analyser] Symbol "charr" is not defined (line: 23)
ERROR 03:26:05,400 - [Semantic Analyser] Constant type is not char, but initialized with char value (line: 23)
ERROR 03:26:05,400 - [Semantic Analyser] Symbol "a" is not a type (line: 25)
ERROR 03:26:05,400 - [Semantic Analyser] Constant type is not char, but initialized with char value (line: 25)
ERROR 03:26:05,400 - [Semantic Analyser] Constant type is not char, but initialized with char value (line: 27)
ERROR 03:26:05,401 - [Semantic Analyser] Symbol "E" is already defined (line: 32)
ERROR 03:26:05,401 - [Semantic Analyser] Symbol "A" is already defined (line: 33)
ERROR 03:26:05,401 - Semantic analysis unsuccessful (error(s) found)
INFO  03:26:05,402 - Compiling source file: C:\Users\dp150101d\Documents\Fakultet\VII semestar\PP1\Projekat\pp1\workspace\MJCompiler\test\semantics\var.mj
INFO  03:26:05,402 - Parsing started
INFO  03:26:05,402 - [Lexer] Token #2: program
INFO  03:26:05,402 - [Lexer] Token #22: Semantics
INFO  03:26:05,402 - [Lexer] Token #22: int
INFO  03:26:05,402 - [Lexer] Token #22: var1
INFO  03:26:05,402 - [Lexer] Token #47: [
INFO  03:26:05,402 - [Lexer] Token #48: ]
INFO  03:26:05,402 - [Lexer] Token #43: ,
INFO  03:26:05,402 - [Lexer] Token #22: var2
INFO  03:26:05,402 - [Lexer] Token #42: ;
INFO  03:26:05,402 - [Lexer] Token #22: char
INFO  03:26:05,403 - [Lexer] Token #22: var3
INFO  03:26:05,403 - [Lexer] Token #43: ,
INFO  03:26:05,403 - [Lexer] Token #22: var4
INFO  03:26:05,403 - [Lexer] Token #47: [
INFO  03:26:05,403 - [Lexer] Token #48: ]
INFO  03:26:05,403 - [Lexer] Token #42: ;
INFO  03:26:05,403 - [Lexer] Token #49: {
INFO  03:26:05,404 - [Lexer] Token #50: }
INFO  03:26:05,404 - Program(
  ProgramName(
   Semantics
  ) [ProgramName]
  Declarations(
    Declarations(
      NoDeclarations(
      ) [NoDeclarations]
      VarDeclaration(
        VarDeclDefinition(
          TypeName(
           int
          ) [TypeName]
          VarIdentifiers(
            ArrayVarIdentifier(
             var1
            ) [ArrayVarIdentifier]
            LastVarIdentifier(
              LastSingleVarIdentifier(
               var2
              ) [LastSingleVarIdentifier]
            ) [LastVarIdentifier]
          ) [VarIdentifiers]
        ) [VarDeclDefinition]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclDefinition(
        TypeName(
         char
        ) [TypeName]
        VarIdentifiers(
          VarIdentifier(
           var3
          ) [VarIdentifier]
          LastVarIdentifier(
            LastArrayVarIdentifier(
             var4
            ) [LastArrayVarIdentifier]
          ) [LastVarIdentifier]
        ) [VarIdentifiers]
      ) [VarDeclDefinition]
    ) [VarDeclaration]
  ) [Declarations]
  NoMethodDeclarations(
  ) [NoMethodDeclarations]
) [Program]
INFO  03:26:05,404 - Parsing successful
INFO  03:26:05,404 - Semantic analysis started
INFO  03:26:05,404 - Semantic analysis successful
INFO  03:26:05,405 - ===== MJ SEMANTIC ANALYSER TEST END =====
