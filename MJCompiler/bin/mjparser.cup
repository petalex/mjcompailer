
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	Logger logger;
	
	boolean errorDetected;
	
	public boolean isErrorDetected() {
		return errorDetected;
	}
   	
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Unrecovered syntax error", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder stringBuilder = new StringBuilder("[Parser] ");
    	stringBuilder.append(message);
    	if (info instanceof Symbol) {
            stringBuilder.append(" (line: ").append(((Symbol)info).left).append(")");
        }
        logger.error(stringBuilder.toString());
    }
:}

init with {:
	logger = Logger.getLogger(getClass());
	errorDetected = false;
:}

scan with {:
	Symbol symbol = this.getScanner().next_token();
	if (symbol != null && symbol.value != null) {
		logger.info("[Lexer] Token " + symbol.toString() + ": " + symbol.value.toString());
	}
	return symbol;
:}


terminal PROGRAM, BREAK, CLASS, INTERFACE, ENUM, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, FOR, EXTENDS, IMPLEMENTS, CONTINUE;
terminal PUBLIC, PROTECTED, PRIVATE;
terminal String IDENT;
terminal Character CHAR;
terminal Boolean BOOL;
terminal Integer NUM;
terminal ADD, SUB, MUL, DIV, MOD, EQU, NEQ, GRT, GTE, LST, LTE, AND, OR;
terminal ASSIGN, INC, DEC, SEMICOLON, COMMA, PERIOD, LPARENT, RPARENT, LSQUARE, RSQUARE, LCURLY, RCURLY;

nonterminal Program, DeclList, MethodDeclList, Decl, ConstDecl, VarDecl, ClassDecl, EnumDecl, InterfaceDecl;
nonterminal ConstIdentList, EnumIdentList, ClassFieldDecl, ClassModifier;
nonterminal VarIdentList, ExtndsImplmnts, ExtendsImplements;
nonterminal Extends, Implements, TypeList, VarDeclList, ClassFieldDeclList, ClassMethodDeclBlock, ClassMethodDeclList, MethodDecl;
nonterminal ClassMethodDecl, InterfaceMethodDeclList, InterfaceMethodDecl, FormParams, FormParamList, FormParam, LastFormParam;
nonterminal StatementList, Statement, DesignatorStmt, AssignDesignatorStmt, Condition, IfCond, ForDesignatorStmt;
nonterminal LastForDesignatorStmt, LastForAssignDesignatorStmt, ForCond, Expression, Designator, ActualParams, ExpressionList;
nonterminal CondTerm, CondFact, AssignOp, RelOp, AddOp, Term, MulOp, Factor, InitList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, ConstIdent, EnumName, EnumIdent, VarIdent, LastVarIdent;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName DeclList LCURLY MethodDeclList RCURLY;

ProgName ::= (ProgramName) IDENT:name;

DeclList ::= (Declarations) DeclList Decl |
			 (NoDeclarations) /* Epsilon */
			 ;

Decl ::= (ConstDeclaration) ConstDecl | 
		 (VarDeclaration) VarDecl | 
		 (ClassDeclaration) ClassDecl | 
		 (EnumDeclaration) EnumDecl | 
		 (InterfaceDeclaration) InterfaceDecl
		 ;

ConstDecl ::= (ConstDeclDefinition) CONST Type ConstIdentList SEMICOLON;

ConstIdentList ::= (ConstIdentifiers) ConstIdentList COMMA ConstIdent |
				   (FirstConstIdentifier) ConstIdent
				   ;

ConstIdent ::= (NumConstIdentifier) IDENT:name ASSIGN NUM:value |
			   (CharConstIdentifier) IDENT:name ASSIGN CHAR:value |
			   (BoolConstIdentifier) IDENT:name ASSIGN BOOL:value
			   ;
			  
EnumDecl ::= (EnumDeclDefinition) ENUM EnumName LCURLY EnumIdentList RCURLY;

EnumName ::= (EnumerationName) IDENT:name;

EnumIdentList ::= (EnumIdentifiers) EnumIdentList COMMA EnumIdent |
				  (FirstEnumIdentifier) EnumIdent
				  ;

EnumIdent ::= (NumEnumIdentifier) IDENT:name ASSIGN NUM:value |
			  (EnumIdentifier) IDENT:name
			  ;

VarDecl ::= (VarDeclDefinition) Type VarIdentList;

ClassFieldDecl ::= (ClassFieldDeclDefinition) ClassModifier VarDecl;
				 
ClassModifier ::= (PublicClassModifier) PUBLIC |
				  (ProtectedClassModifer) PROTECTED |
				  (PrivateClassModiefr) PRIVATE
				  ;

VarIdentList ::= (VarIdentifiers) VarIdent VarIdentList |
				 (LastVarIdentifier) LastVarIdent
		 	 	 ;

VarIdent ::= (ArrayVarIdentifier) IDENT:name LSQUARE RSQUARE COMMA |
			 (VarIdentifier) IDENT:name COMMA |
			 (GlobalVarCommaError) error COMMA:c
	 	  	 {: parser.report_error("Syntax error recovery: Global variable declaration[comma] (line: " + cleft + ")", null); :}
			 ;

LastVarIdent ::= (LastArrayVarIdentifier) IDENT:name LSQUARE RSQUARE SEMICOLON |
			 	 (LastSingleVarIdentifier) IDENT:name SEMICOLON |
			 	 (GlobalVarSemicolonError) error SEMICOLON:s
	 			 {: parser.report_error("Syntax error recovery: Global variable declaration[semicolon] (line: " + sleft + ")", null); :}
			 	 ;

ClassDecl ::= (ClassDeclDefinition) CLASS IDENT ExtndsImplmnts ClassFieldDeclList ClassMethodDeclBlock RCURLY;

ExtndsImplmnts ::= (ExtendsAndImplementsWrapper) ExtendsImplements TypeList LCURLY |
				   (ExtendsClassWrapper) Extends |
				   (ImpelmentsInterfacesWrapper) Implements LCURLY |
				   (NoExtendsAndImplements) LCURLY
				   ;
				 	  
ExtendsImplements ::= (ExtendsAndImplements) EXTENDS Type IMPLEMENTS |
					  (ExtendsAndImplementsError) error IMPLEMENTS:i
					  {: parser.report_error("Syntax error recovery: Extending class[implements] (line: " + ileft + ")", null); :}
					  ;

Extends ::= (ExtendsClass) EXTENDS Type LCURLY |
			(ExtendsClassError) error LCURLY:l
			{: parser.report_error("Syntax error recovery: Extending class[left curly bracket] (line: " + lleft + ")", null); :}
			;

Implements ::= (ImplementsInterfaces) IMPLEMENTS TypeList;
			   
TypeList ::= (Types) TypeList COMMA Type |
			 (FirstType) Type
			 ;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl |
			 	(NoVarDeclarations) /* Epsilon */
			 	;
			 	
ClassFieldDeclList ::= (ClassFieldDeclarations) ClassFieldDeclList ClassFieldDecl |
				 	   (NoClassFieldDeclarations) /* Epsilon */
				 	   ;
			 
ClassMethodDeclBlock ::= (ClassMethodDeclarationsBlock) LCURLY ClassMethodDeclList  RCURLY |
			 		 	 (NoClassMethodDeclarationsBlock) /* Epsilon */
			 		 	 ;

InterfaceDecl ::= (InterfaceDeclDefinition) INTERFACE IDENT LCURLY InterfaceMethodDeclList RCURLY;

InterfaceMethodDeclList ::= (InterfaceMethodDeclarations) InterfaceMethodDeclList InterfaceMethodDecl |
						    (NoInterfaceMethodDeclarations) /* Epsilon */
					 	    ;

InterfaceMethodDecl ::= (TypeInterfaceMethodDeclaration) Type IDENT LPARENT FormParams SEMICOLON |
						(VoidInterfaceMethodDeclaration) VOID IDENT LPARENT FormParams SEMICOLON
						;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl |
				   (NoMethodDeclarations) /* Epsilon */
			 	   ;
			 	   
ClassMethodDeclList ::= (ClassMethodDeclarations) ClassMethodDeclList ClassMethodDecl |
					    (NoClassMethodDeclarations) /* Epsilon */
				 	    ;

MethodDecl ::= (TypeMethodDeclaration) Type IDENT LPARENT FormParams VarDeclList LCURLY StatementList RCURLY |
			   (VoidMethodDeclaration) VOID IDENT LPARENT FormParams VarDeclList LCURLY StatementList RCURLY
			   ;
			   
ClassMethodDecl ::= (ClassMethodDeclaration) ClassModifier MethodDecl;

FormParams ::= (MethodFormalParameters) FormParamList |
			   (NoMethodFormalParameters) RPARENT
			   ;

FormParamList ::= (FormalParameters) FormParam FormParamList |
				  (LastFormalParameter) LastFormParam
			   	  ;

FormParam ::= (ArrayFormalParameter) Type IDENT LSQUARE RSQUARE COMMA |
			  (FormalParameter) Type IDENT COMMA |
			  (FormalParameterCommaError) error COMMA:c
 	  	 	  {: parser.report_error("Syntax error recovery: Formal parameter[comma] (line: " + cleft + ")", null); :}
			  ;
			  
LastFormParam ::= (LastArrayFormalParameter) Type IDENT LSQUARE RSQUARE RPARENT |
			  	  (LastSingleFormalParameter) Type IDENT RPARENT |
			  	  (FormalParameterSemicolonError) error RPARENT:r
		 		  {: parser.report_error("Syntax error recovery: Formal parameter[right parenthesis] (line: " + rleft + ")", null); :}
			 	  ;

Type ::= (TypeName) IDENT:name;

StatementList ::= (Statements) StatementList Statement |
				  (NoStatements) /* Epsilon */
			   	  ;

Statement ::= (DesignatorStatement) DesignatorStmt |
			  (IfStatement) IF LPARENT IfCond Statement |
			  (IfElseStatement) IF LPARENT IfCond Statement ELSE Statement |
			  (ForStatement) FOR LPARENT ForDesignatorStmt ForCond SEMICOLON LastForDesignatorStmt Statement |
			  (BreakStatement) BREAK SEMICOLON |
			  (ContinueStatement) CONTINUE SEMICOLON |
			  (TypeReturnStatement) RETURN Expression SEMICOLON |
			  (VoidReturnStatement) RETURN SEMICOLON |
			  (ReadStatement) READ LPARENT Designator RPARENT SEMICOLON |
			  (SimplePrintStatement) PRINT LPARENT Expression RPARENT SEMICOLON |
			  (NumConstPrintStatement) PRINT LPARENT Expression COMMA NUM RPARENT SEMICOLON |
			  (BlockStatement) LCURLY StatementList RCURLY
			  ;

DesignatorStmt ::= (AssignDesignatorStatementWrapper) AssignDesignatorStmt |
				   (FunctionDesignatorStatement) Designator LPARENT ActualParams RPARENT SEMICOLON |
				   (IncDesignatorStatement) Designator INC SEMICOLON |
				   (DecDesignatorStatement) Designator DEC SEMICOLON
				   ;
				   
AssignDesignatorStmt ::= (AssignDesignatorStatement) Designator AssignOp Expression SEMICOLON |
					 	 (AssignError) error SEMICOLON:s
				 		 {: parser.report_error("Syntax error recovery: Assignment (line: " + sleft + ")", null); :}
					 	 ;
					 	 
ForDesignatorStmt ::= (ForDesignatorStatement) DesignatorStmt |
					  (NoForDesignatorStatement) SEMICOLON
			   	 	  ;
			   	 	  
LastForDesignatorStmt ::= (LastForAssignDesignatorStatementWrapper) LastForAssignDesignatorStmt |
				   		  (LastForFunctionDesignatorStatement) Designator LPARENT ActualParams RPARENT RPARENT |
				   		  (LastForIncDesignatorStatement) Designator INC RPARENT |
				   		  (LastForDecDesignatorStatement) Designator DEC RPARENT |
				   		  (NoLastForDesignatorStatement) RPARENT
				   		  ;
				   
LastForAssignDesignatorStmt ::= (LastForAssignDesignatorStatement) Designator AssignOp Expression RPARENT |
							 	(LastForAssignError) error RPARENT:r
						 		{: parser.report_error("Syntax error recovery: Assignment[last in for] (line: " + rleft + ")", null); :}
							 	;
						
ActualParams ::= (ActualParameters) ExpressionList |
			   	 (NoActualParameters) /* Epsilon */
			   	 ;
			   	 
ExpressionList ::= (Expressions) ExpressionList COMMA Expression |
				   (FirstExpression) Expression
				   ;

Condition ::= (ConditionTerms) Condition OR CondTerm |
			  (FirstConditionTerm) CondTerm
			  ;
			
CondTerm ::= (ConditionFacts) CondTerm AND CondFact |
			 (FirstConditionFact) CondFact
			 ;
			 
CondFact ::= (ConditionExpressions) CondFact RelOp Expression |
			 (FirstConditionExpression) Expression
			 ;

IfCond ::= (IfCondition) Condition RPARENT |
		   (IfConditionError) error RPARENT:r
		   {: parser.report_error("Syntax error recovery: If/Else condition (line: " + rleft + ")", null); :}
		   ;

ForCond ::= (ForCondition) Condition |
			(NoForCondition) /* Epsilon */
			;

Expression ::= (Terms) Expression AddOp Term |
			   (NegFirstTerm) SUB Term |
			   (FirstTerm) Term
			   ;
			   
Term ::= (Factors) Term MulOp Factor |
		 (FirstFactor) Factor
		 ;
		 
Factor ::= (FunctionFactor) Designator LPARENT ActualParams RPARENT |
		   (DesignatorFactor) Designator |
		   (NumFactor) NUM |
		   (CharFactor) CHAR |
		   (BoolFactor) BOOL |
		   (NewArrayFactor) NEW Type LSQUARE Expression RSQUARE |
		   (NewInitializedArrayFactor) NEW Type LSQUARE Expression RSQUARE LCURLY InitList RCURLY |
		   (NewFactor) NEW Type |
		   (ExpressionFactor) LPARENT Expression RPARENT
		   ;
		   
InitList ::= (InitializationList) ExpressionList |
			 (EmptyInitializationList) /* Epsilon */
			 ;

Designator ::= (FieldDesignator) Designator PERIOD IDENT |
			   (ArrayDesignator) Designator LSQUARE Expression RSQUARE |
			   (SimpleDesignator) IDENT
			   ;

AssignOp ::= (Assign) ASSIGN;

RelOp ::= (Equal) EQU | 
		  (NotEqual) NEQ | 
		  (GreaterThan) GRT | 
		  (GreaterThanEqual) GTE | 
		  (LessThan) LST | 
		  (LessThanEqual) LTE
		  ;

AddOp ::= (Addition) ADD | 
		  (Subtraction) SUB;

MulOp ::= (Multiplication) MUL | 
		  (Division) DIV | 
		  (Modulus) MOD
		  ;